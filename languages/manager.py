#!/usr/bin/env python3
"""
Modular Language Manager for CGI Process Pool
Provides a unified interface for managing multiple programming languages
"""

import json
import os
import sys
import argparse
from pathlib import Path
from string import Template
from typing import Dict, List, Optional, Any

class LanguageManager:
    """Manages language definitions and generates automation scripts"""
    
    def __init__(self, config_path: str = "languages/definitions.json"):
        self.config_path = Path(config_path)
        self.config = self._load_config()
        
    def _load_config(self) -> Dict[str, Any]:
        """Load language configuration"""
        if not self.config_path.exists():
            raise FileNotFoundError(f"Language config not found: {self.config_path}")
        
        with open(self.config_path, 'r') as f:
            return json.load(f)
    
    def list_languages(self) -> List[str]:
        """List all available languages"""
        return list(self.config.get('languages', {}).keys())
    
    def get_language(self, name: str) -> Optional[Dict[str, Any]]:
        """Get language configuration"""
        return self.config.get('languages', {}).get(name)
    
    def add_language(self, name: str, config: Dict[str, Any]) -> None:
        """Add a new language configuration"""
        if 'languages' not in self.config:
            self.config['languages'] = {}
        
        self.config['languages'][name] = config
        self._save_config()
    
    def _save_config(self) -> None:
        """Save configuration back to file"""
        with open(self.config_path, 'w') as f:
            json.dump(self.config, f, indent=2)
    
    def generate_automation_script(self, language: str) -> str:
        """Generate automation script for a language"""
        lang_config = self.get_language(language)
        if not lang_config:
            raise ValueError(f"Language '{language}' not found")
        
        # Template for the automation script
        script_template = '''#!/bin/bash

# Script to add a new ${LANGUAGE_NAME} CGI application with full YARP integration  
# Usage: ./add_${LANGUAGE_LOWER}_cgi_app.sh <app_name> <start_port> [instance_count]
# Generated by Language Manager

set -e

APP_NAME="$$1"
START_PORT="$$2"
INSTANCE_COUNT="$${3:-2}"

if [ -z "$$APP_NAME" ] || [ -z "$$START_PORT" ]; then
    echo "Usage: $$0 <app_name> <start_port> [instance_count]"
    echo "Example: $$0 analytics 8007 3"
    exit 1
fi

echo "${LANGUAGE_ICON} Adding ${LANGUAGE_NAME} CGI application: $$APP_NAME"
echo "üì° Start port: $$START_PORT"  
echo "üî¢ Instances: $$INSTANCE_COUNT"

# 1. Create ${LANGUAGE_NAME} CGI application source
echo "üìù Creating ${LANGUAGE_NAME} CGI source file..."
cat > "$${APP_NAME}${FILE_EXTENSION}" << 'EOF'
${SERVICE_TEMPLATE}
EOF

# Replace placeholder with actual app name
sed -i "s/APP_NAME_PLACEHOLDER/$$APP_NAME/g" "$${APP_NAME}${FILE_EXTENSION}"

# Make executable if needed
${MAKE_EXECUTABLE}

# 2. Update pool_manager.py
echo "üîß Updating pool_manager.py..."
PORTS=""
for ((i=0; i<INSTANCE_COUNT; i++)); do
    PORT=$$((START_PORT + i))
    if [ $$i -eq 0 ]; then
        PORTS="[$$PORT"
    else
        PORTS="$${PORTS}, $$PORT"
    fi
done
PORTS="$${PORTS}]"

# Add to pools dictionary (before the closing brace)
sed -i "/^}/i\\\\
    '$$APP_NAME': {\\\\
        'command': '${RUNTIME_COMMAND}',\\\\
        'ports': $$PORTS,\\\\
        'min_processes': 1,\\\\
        'max_processes': $$INSTANCE_COUNT,\\\\
        'health_check': '${HEALTH_CHECK}'\\\\
    }," pool_manager.py

# 3-6. Update YARP configuration and monitoring (standard for all languages)
${YARP_INTEGRATION}

echo ""
echo "‚úÖ Successfully added $$APP_NAME ${LANGUAGE_NAME} service!"
echo ""
echo "üöÄ To start the system with your new service:"
echo "   1. Terminal 1: make run-pool"
echo "   2. Terminal 2: make run-yarp"
echo ""
echo "üß™ To test the new service:"
echo "   curl \\"http://localhost:8080/api/$$APP_NAME?${TEST_PARAMS}\\""
echo "   curl \\"http://localhost:8080/api/$$APP_NAME?${HEALTH_PARAMS}\\""
echo ""
echo "üìä Monitor at: http://localhost:8080/admin"
echo ""
'''
        
        # Get template variables
        variables = self._get_template_variables(language, lang_config)
        
        # Generate the script
        template = Template(script_template)
        return template.safe_substitute(**variables)
    
    def _get_template_variables(self, language: str, lang_config: Dict[str, Any]) -> Dict[str, str]:
        """Get variables for template substitution"""
        
        # Language-specific icons
        icons = {
            'c': 'üîß',
            'python': 'üêç', 
            'csharp': 'üî∑',
            'javascript': 'üìú',
            'rust': 'ü¶Ä',
            'go': 'üêπ'
        }
        
        # Standard YARP integration code (same for all languages)
        yarp_integration = '''
# Update YARP appsettings.json
echo "‚öôÔ∏è Updating YARP configuration..."

# Create destinations JSON  
DESTINATIONS=""
for ((i=0; i<INSTANCE_COUNT; i++)); do
    PORT=$((START_PORT + i))
    DEST_NAME="${APP_NAME}-$((i+1))"
    if [ $i -eq 0 ]; then
        DESTINATIONS="\\"$DEST_NAME\\": {\\"Address\\": \\"http://127.0.0.1:$PORT/\\"}"
    else
        DESTINATIONS="${DESTINATIONS}, \\"$DEST_NAME\\": {\\"Address\\": \\"http://127.0.0.1:$PORT/\\"}"
    fi
done

# Add route and cluster configuration
ROUTE_JSON="\\"${APP_NAME}-route\\": {
        \\"ClusterId\\": \\"${APP_NAME}-cluster\\",
        \\"Match\\": {
          \\"Path\\": \\"/api/${APP_NAME}/{**catch-all}\\"
        },
        \\"Transforms\\": [
          { \\"PathRemovePrefix\\": \\"/api/${APP_NAME}\\" }
        ],
        \\"Metadata\\": {
          \\"Service\\": \\"${APP_NAME}\\"
        }
      },"

CLUSTER_JSON="\\"${APP_NAME}-cluster\\": {
        \\"LoadBalancingPolicy\\": \\"RoundRobin\\",
        \\"HealthCheck\\": {
          \\"Active\\": {
            \\"Enabled\\": true,
            \\"Interval\\": \\"00:00:10\\",
            \\"Timeout\\": \\"00:00:05\\",
            \\"Policy\\": \\"ConsecutiveFailures\\",
            \\"Path\\": \\"''' + lang_config['runtime']['health_check'] + '''\\"
          }
        },
        \\"Destinations\\": {
          ${DESTINATIONS}
        }
      },"

# Insert into appsettings.json
sed -i "/\\"admin-route\\":/i\\\\${ROUTE_JSON}" proxy/CGIProxy/appsettings.json
sed -i "/\\"admin-cluster\\":/i\\\\${CLUSTER_JSON}" proxy/CGIProxy/appsettings.json

# Update monitoring and logging
echo "üîå Updating YARP endpoints..."
if ! grep -q "/api/${APP_NAME}" proxy/CGIProxy/Program.cs; then
    sed -i "s|/api/auth\\" }|/api/auth\\", \\"/api/${APP_NAME}\\" }|" proxy/CGIProxy/Program.cs
fi

echo "üìä Updating request logging..."
NEW_SERVICE_CHECK="else if (context.Request.Path.StartsWithSegments(\\"/api/${APP_NAME}\\"))
            {
                requestMetric.Service = \\"${APP_NAME}\\";
            }"

if ! grep -q "/api/${APP_NAME}" proxy/CGIProxy/Middleware/RequestLoggingMiddleware.cs; then
    sed -i "/else if (context.Request.Path.StartsWithSegments(\\"/admin\\"))/i\\\\            ${NEW_SERVICE_CHECK}" proxy/CGIProxy/Middleware/RequestLoggingMiddleware.cs
fi

echo "üîç Updating process monitoring..."
if ! grep -q "${APP_NAME}" proxy/CGIProxy/Services/ProcessMonitorService.cs; then
    sed -i "s|(search\\\\\\\\|auth\\\\\\\\|python_cgi)|(search\\\\\\\\|auth\\\\\\\\|python_cgi\\\\\\\\|${APP_NAME})|" proxy/CGIProxy/Services/ProcessMonitorService.cs
    sed -i "s|''' + lang_config['monitoring']['name_extraction'].format(service_name='${APP_NAME}') + '''|" proxy/CGIProxy/Services/ProcessMonitorService.cs
fi
'''
        
        return {
            'LANGUAGE_NAME': lang_config['name'],
            'LANGUAGE_LOWER': language.lower(),
            'LANGUAGE_ICON': icons.get(language, 'üîß'),
            'FILE_EXTENSION': lang_config['file_extension'],
            'RUNTIME_COMMAND': lang_config['runtime']['command'].replace('{executable}', '${APP_NAME}' + lang_config['executable_extension']),
            'HEALTH_CHECK': lang_config['runtime']['health_check'],
            'MAKE_EXECUTABLE': 'chmod +x "${APP_NAME}' + lang_config['file_extension'] + '"' if not lang_config['build_required'] else '# No chmod needed for compiled languages',
            'SERVICE_TEMPLATE': self._get_service_template(language, lang_config),
            'YARP_INTEGRATION': yarp_integration,
            'TEST_PARAMS': 'service=demo&data=test',
            'HEALTH_PARAMS': lang_config['runtime']['health_check'].lstrip('/?')
        }
    
    def _get_service_template(self, language: str, lang_config: Dict[str, Any]) -> str:
        """Generate service template for the language"""
        # This would be expanded to generate actual service code templates
        # For now, return a placeholder
        return f"""# {lang_config['name']} Service Template for APP_NAME_PLACEHOLDER
# This would contain the actual service code template
# Generated by Language Manager for {language}

# TODO: Implement actual service template generation
"""
    
    def update_discovery_system(self, language: str) -> None:
        """Update discovery.py to support the new language"""
        lang_config = self.get_language(language)
        if not lang_config:
            raise ValueError(f"Language '{language}' not found")
        
        print(f"Updating discovery system for {language}...")
        
        # Read current discovery.py
        discovery_path = Path("discovery.py")
        if not discovery_path.exists():
            print("Warning: discovery.py not found")
            return
        
        with open(discovery_path, 'r') as f:
            content = f.read()
        
        # Add function for the new language (simplified example)
        new_function = f'''
def get_{language}_samples(manifest):
    """Get all {lang_config['name']} language samples"""
    samples = []
    for name, sample in manifest.get('samples', {{}}).items():
        if sample.get('language') == '{language}':
            samples.append({{
                'name': name,
                'path': Path(sample['path']),
                'executable': sample.get('executable', f"{{name}}{lang_config['executable_extension']}"),
                'ports': sample.get('default_ports', [])
            }})
    return samples
'''
        
        print(f"Would add: get_{language}_samples function to discovery.py")
        print("Note: Full integration requires manual review and testing")

def main():
    parser = argparse.ArgumentParser(description='Language Manager for CGI Process Pool')
    parser.add_argument('command', choices=['list', 'info', 'generate-script', 'add', 'update-discovery'],
                        help='Command to execute')
    parser.add_argument('--language', help='Language name')
    parser.add_argument('--config', default='languages.json', help='Config file path')
    parser.add_argument('--output', help='Output file path for generated scripts')
    
    args = parser.parse_args()
    
    try:
        manager = LanguageManager(args.config)
        
        if args.command == 'list':
            print("Available languages:")
            for lang in manager.list_languages():
                lang_config = manager.get_language(lang)
                print(f"  {lang}: {lang_config['description']}")
        
        elif args.command == 'info':
            if not args.language:
                print("Error: --language required for info command")
                sys.exit(1)
            
            lang_config = manager.get_language(args.language)
            if not lang_config:
                print(f"Error: Language '{args.language}' not found")
                sys.exit(1)
            
            print(f"Language: {lang_config['name']}")
            print(f"Description: {lang_config['description']}")
            print(f"File Extension: {lang_config['file_extension']}")
            print(f"Build Required: {lang_config['build_required']}")
            print(f"Runtime Command: {lang_config['runtime']['command']}")
        
        elif args.command == 'generate-script':
            if not args.language:
                print("Error: --language required for generate-script command")
                sys.exit(1)
            
            script_content = manager.generate_automation_script(args.language)
            
            if args.output:
                with open(args.output, 'w') as f:
                    f.write(script_content)
                os.chmod(args.output, 0o755)
                print(f"Generated automation script: {args.output}")
            else:
                print(script_content)
        
        elif args.command == 'update-discovery':
            if not args.language:
                print("Error: --language required for update-discovery command")
                sys.exit(1)
            
            manager.update_discovery_system(args.language)
            
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()