#!/bin/bash

# Script to add a new Rust CGI application with full YARP integration  
# Usage: ./add_rust_cgi_app.sh <app_name> <start_port> [instance_count]
# Generated by Language Manager

set -e

APP_NAME="$1"
START_PORT="$2"
INSTANCE_COUNT="${3:-2}"

if [ -z "$APP_NAME" ] || [ -z "$START_PORT" ]; then
    echo "Usage: $0 <app_name> <start_port> [instance_count]"
    echo "Example: $0 analytics 8007 3"
    exit 1
fi

echo "🦀 Adding Rust CGI application: $APP_NAME"
echo "📡 Start port: $START_PORT"  
echo "🔢 Instances: $INSTANCE_COUNT"

# 1. Create Rust CGI application source
echo "📝 Creating Rust CGI source file..."
cat > "${APP_NAME}.rs" << 'EOF'
# Rust Service Template for APP_NAME_PLACEHOLDER
# This would contain the actual service code template
# Generated by Language Manager for rust

# TODO: Implement actual service template generation

EOF

# Replace placeholder with actual app name
sed -i "s/APP_NAME_PLACEHOLDER/$APP_NAME/g" "${APP_NAME}.rs"

# Make executable if needed
# No chmod needed for compiled languages

# 2. Update pool_manager.py
echo "🔧 Updating pool_manager.py..."
PORTS=""
for ((i=0; i<INSTANCE_COUNT; i++)); do
    PORT=$((START_PORT + i))
    if [ $i -eq 0 ]; then
        PORTS="[$PORT"
    else
        PORTS="${PORTS}, $PORT"
    fi
done
PORTS="${PORTS}]"

# Add to pools dictionary (before the closing brace)
sed -i "/^}/i\\
    '$APP_NAME': {\\
        'command': './${APP_NAME}',\\
        'ports': $PORTS,\\
        'min_processes': 1,\\
        'max_processes': $INSTANCE_COUNT,\\
        'health_check': '/?health=check'\\
    }," pool_manager.py

# 3-6. Update YARP configuration and monitoring (standard for all languages)

# Update YARP appsettings.json
echo "⚙️ Updating YARP configuration..."

# Create destinations JSON  
DESTINATIONS=""
for ((i=0; i<INSTANCE_COUNT; i++)); do
    PORT=$((START_PORT + i))
    DEST_NAME="${APP_NAME}-$((i+1))"
    if [ $i -eq 0 ]; then
        DESTINATIONS="\"$DEST_NAME\": {\"Address\": \"http://127.0.0.1:$PORT/\"}"
    else
        DESTINATIONS="${DESTINATIONS}, \"$DEST_NAME\": {\"Address\": \"http://127.0.0.1:$PORT/\"}"
    fi
done

# Add route and cluster configuration
ROUTE_JSON="\"${APP_NAME}-route\": {
        \"ClusterId\": \"${APP_NAME}-cluster\",
        \"Match\": {
          \"Path\": \"/api/${APP_NAME}/{**catch-all}\"
        },
        \"Transforms\": [
          { \"PathRemovePrefix\": \"/api/${APP_NAME}\" }
        ],
        \"Metadata\": {
          \"Service\": \"${APP_NAME}\"
        }
      },"

CLUSTER_JSON="\"${APP_NAME}-cluster\": {
        \"LoadBalancingPolicy\": \"RoundRobin\",
        \"HealthCheck\": {
          \"Active\": {
            \"Enabled\": true,
            \"Interval\": \"00:00:10\",
            \"Timeout\": \"00:00:05\",
            \"Policy\": \"ConsecutiveFailures\",
            \"Path\": \"/?health=check\"
          }
        },
        \"Destinations\": {
          ${DESTINATIONS}
        }
      },"

# Insert into appsettings.json
sed -i "/\"admin-route\":/i\\${ROUTE_JSON}" proxy/CGIProxy/appsettings.json
sed -i "/\"admin-cluster\":/i\\${CLUSTER_JSON}" proxy/CGIProxy/appsettings.json

# Update monitoring and logging
echo "🔌 Updating YARP endpoints..."
if ! grep -q "/api/${APP_NAME}" proxy/CGIProxy/Program.cs; then
    sed -i "s|/api/auth\" }|/api/auth\", \"/api/${APP_NAME}\" }|" proxy/CGIProxy/Program.cs
fi

echo "📊 Updating request logging..."
NEW_SERVICE_CHECK="else if (context.Request.Path.StartsWithSegments(\"/api/${APP_NAME}\"))
            {
                requestMetric.Service = \"${APP_NAME}\";
            }"

if ! grep -q "/api/${APP_NAME}" proxy/CGIProxy/Middleware/RequestLoggingMiddleware.cs; then
    sed -i "/else if (context.Request.Path.StartsWithSegments(\"/admin\"))/i\\            ${NEW_SERVICE_CHECK}" proxy/CGIProxy/Middleware/RequestLoggingMiddleware.cs
fi

echo "🔍 Updating process monitoring..."
if ! grep -q "${APP_NAME}" proxy/CGIProxy/Services/ProcessMonitorService.cs; then
    sed -i "s|(search\\\\|auth\\\\|python_cgi)|(search\\\\|auth\\\\|python_cgi\\\\|${APP_NAME})|" proxy/CGIProxy/Services/ProcessMonitorService.cs
    sed -i "s|cmdLine.Contains("${APP_NAME}") ? "${APP_NAME}" :|" proxy/CGIProxy/Services/ProcessMonitorService.cs
fi


echo ""
echo "✅ Successfully added $APP_NAME Rust service!"
echo ""
echo "🚀 To start the system with your new service:"
echo "   1. Terminal 1: make run-pool"
echo "   2. Terminal 2: make run-yarp"
echo ""
echo "🧪 To test the new service:"
echo "   curl \"http://localhost:8080/api/$APP_NAME?service=demo&data=test\""
echo "   curl \"http://localhost:8080/api/$APP_NAME?health=check\""
echo ""
echo "📊 Monitor at: http://localhost:8080/admin"
echo ""
